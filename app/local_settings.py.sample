# coding: utf-8

import os


class Config(object):
    # db conf
    SQLALCHEMY_COMMIT_ON_TEARDOWN = True
    SQLALCHEMY_TRACK_MODIFICATIONS = True
    # blog content config
    POSTS_PER_PAGE = 20
    FOLLOWERS_PER_PAGE = 50
    COMMENTS_PER_PAGE = 30
    # reg-notice-receiver email
    ADMIN_EMAIL = 'ws@t.com'
    # mail conf
    MAIL_SERVER = 'smtp.mailgun.org'
    MAIL_PORT = 465
    MAIL_USE_TLS = False
    MAIL_USE_SSL = True
    MAIL_USERNAME = 'postmaster@sandbox.mailgun.org'
    MAIL_PASSWORD = ''

    @staticmethod
    def init_app(app):
        print 'Config.init_app(app) called'
        pass


class DevConfig(Config):
    # dev status
    DEBUG = True
    # secret key
    SECRET_KEY = 'key'
    # celery conf
    BROKER_URL = 'amqp://u:p@localhost:5672/vhost'
    CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
    CELERY_TASK_SERIALIZER = 'json'
    CELERY_RESULT_SERIALIZER = 'json'
    CELERY_TASK_RESULT_EXPIRES = 60*60*24
    CELERY_ACCEPT_CONTENT = ['json']
    # db uri
    SQLALCHEMY_DATABASE_URI = 'mysql://u:p@localhost:3306/db?charset=utf8'


class TestingConfig(Config):
    # testing status
    TESTING = True
    # celery conf
    BROKER_URL = 'amqp://chengs:warsong@localhost:5672/vhost'
    CELERY_RESULT_BACKEND = 'redis://localhost:6379/1'
    CELERY_TASK_SERIALIZER = 'json'
    CELERY_RESULT_SERIALIZER = 'json'
    CELERY_TASK_RESULT_EXPIRES = 60*60*24
    CELERY_ACCEPT_CONTENT = ['json']
    # db uri
    SQLALCHEMY_DATABASE_URI = 'mysql://u:p@localhost:3306/db?charset=utf8'


class ProductionConfig(Config):

    # celery conf
    BROKER_URL = 'amqp://u:p@localhost:5672/vhost'
    CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
    CELERY_TASK_SERIALIZER = 'json'
    CELERY_RESULT_SERIALIZER = 'json'
    CELERY_TASK_RESULT_EXPIRES = 60*60*24
    CELERY_ACCEPT_CONTENT = ['json']
    # db uri
    SQLALCHEMY_DATABASE_URI = 'mysql://u:p@localhost:3306/db?charset=utf8'


config = {
    'DevConfig': DevConfig,
    'TestingConfig': TestingConfig,
    'ProductionConfig': ProductionConfig,
}

current_env = config[os.getenv('CHENGSITE_ENV') or 'DevConfig']
